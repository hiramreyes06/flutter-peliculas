Para eso va a ser necesario primero obtener los datos que se van a mostrar
como detalles, y despues al navegar pasar los datos, para que al momento
de que se construya el widget encargado de mostrar los detalles ya contenga
los datos:

class PeliculaDetalle extends StatelessWidget {



  @override
  Widget build(BuildContext context) {

//Asi capturamos los argumentos enviados por navegacion con pushnamed
final Pelicula pelicula = ModalRoute.of(context).settings.arguments;

    return Scaffold(

      //Este widget nos permite tener animaciones en el appbar comun
      body: CustomScrollView(
        slivers: <Widget>[

          _crearAppbar( pelicula ),

          SliverList(
            delegate: SliverChildListDelegate(
              [
                SizedBox( height: 10.0 ),

                _posterTitulo( context , pelicula ),

                 _descripcion(pelicula),             

                _peliculaCasting( pelicula.id )

               
              ]
            ),
          ),


           

            ],
          ),
          
        );
          
            }
          
 Widget _crearAppbar(Pelicula pelicula) {
//Este widget es un appbar animado que muestra una imagen de fondo y se reduce
//conforme se hace scroll hacia abajo de la pantalla
return SliverAppBar(
elevation: 2.0,
backgroundColor: Colors.indigoAccent,
expandedHeight: 200.0,
floating: true,
pinned: true,
//Es necesario este widget para mostrar el contenido del appbar
flexibleSpace: FlexibleSpaceBar(

  centerTitle: true,
  title: Text( pelicula.title ),

  background: FadeInImage(
    image: NetworkImage( pelicula.getBackgroundImgUrl() ),
    placeholder: AssetImage('assets/img/loading.gif'),
    fadeInDuration: Duration( milliseconds: 15),
    fit: BoxFit.cover
  ),

  ),



);

  }

//Este wisget se encarga de mostrar una imagen con titulo y subtitulo a lado
 Widget _posterTitulo(BuildContext context ,Pelicula pelicula) {

return Container(
  padding: EdgeInsets.symmetric(horizontal: 20.0),
  child: Row(
    children: <Widget>[

      //El hero es necesario para la animacion de la imagen recibida de otro Hero
         Hero(
           tag: pelicula.idUnico,
          child: ClipRRect(
            borderRadius: BorderRadius.circular( 20.0 ),
              child: Image(
              image: NetworkImage( pelicula.getImagenUrl() ),
              height: 150.0,
              ),
        ),
         ),
     
      SizedBox( width: 20.0),
      //Esto son el titulo y el subtitulo de la pelicula
      Flexible(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            //Los estilos de estos textos sin para que sean largos y se desplacen
            Text( pelicula.title, style:Theme.of(context).textTheme.title, overflow: TextOverflow.ellipsis ),
            SizedBox(height: 20),
            Text(pelicula.originalTitle, style:Theme.of(context).textTheme.subtitle, overflow: TextOverflow.ellipsis),
            SizedBox(height: 20), 
            Row(
              children: <Widget>[

                Icon(Icons.star_border),
                Text( pelicula.voteAverage.toString(),  style:Theme.of(context).textTheme.subtitle, overflow: TextOverflow.ellipsis )
                
              ],
            ),

           

          ],
        )
      )

  

    ],



  ),
);


 }

 Widget _descripcion(Pelicula pelicula) {

return Container(

padding: EdgeInsets.symmetric(horizontal: 10.0 , vertical: 20.0),
child: Text(
  pelicula.overview,
  textAlign: TextAlign.justify,
)


);

 }

 Widget _peliculaCasting(int id) {

final peliculaProvider = new PeliculasProvider();

return FutureBuilder(
  future: peliculaProvider.getActores( id.toString() ),
  builder: (BuildContext context, AsyncSnapshot<List<Actor>> snapshot) {
  
    if(snapshot.hasData){

      return _crearActoresPageView( snapshot.data );
    }else{

      print('No existe data');

      return Center( child: CircularProgressIndicator() );
    }

  }




);


  }


 Widget _crearActoresPageView( List<Actor> actores ) {

final _pageController = new PageController(
      initialPage: 1,
      viewportFraction: 0.3
    );
    _pageController.addListener((){
      if ( _pageController.position.pixels <= 50 ){
        _pageController.animateToPage(1, duration: Duration(milliseconds: 3000), curve: Curves.elasticOut);
      }
    });

return SizedBox(
  height: 220.0,
  child: PageView.builder(
    pageSnapping: false,
    itemCount: actores.length,
  
    itemBuilder: (context, i) => _tarjetaActor( actores[i] ),
    
    controller: _pageController,

    )
);

  }


 



  Widget _tarjetaActor( Actor actor){

return Container(
child: Column(
children: <Widget>[

  ClipRRect(
      borderRadius: BorderRadius.circular(20.0),
      child: FadeInImage(
      placeholder: AssetImage('assets/img/no-image.jpg'),
       image: NetworkImage( actor.getImagenUrl() ),
       height: 200.0,
       fit: BoxFit.cover,
       ),
  ),

  Text(
    actor.name,
    overflow: TextOverflow.ellipsis,
    )

],


)

);

  }


}